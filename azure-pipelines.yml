trigger:
  batch: true
  branches:
    include:
      - main
      - SPRINT-*

pool:
  vmImage: 'Ubuntu-16.04'
  demands: npm

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages: 

  - stage: Build
    displayName: "Build"
    jobs:
      - job: "Build"
        steps:

          - task: DeleteFiles@1
            condition: always()
            displayName: 'Delete JUnit files'
            inputs:
              SourceFolder: $(System.DefaultWorkingDirectory)/OpenEvent.Web/ClientApp/junit
              Contents: 'TESTS*.xml'

          - task: DotNetCoreCli@2
            condition: succeeded()
            inputs:
              command: 'test'
              projects: '**/*.Test/*.csproj'
              arguments: -c $(BuildConfiguration) --collect:"XPlat Code Coverage"
              testRunTitle: 'Run .net unit tests and collect coverage'
            displayName: 'Unit Tests (.net)'

          - task: DotNetCoreCli@2
            condition: succeeded()
            inputs:
              command: 'test'
              projects: '**/*.Integration/*.csproj'
              arguments: -c $(BuildConfiguration) --collect:"XPlat Code Coverage"
              testRunTitle: 'Run .net integration tests and collect coverage'
            displayName: 'Integration Tests (.net)'

          - task: Npm@1
            condition: succeededOrFailed()
            displayName: "npm install"
            inputs:
              command: install
              workingDir: 'OpenEvent.Web/ClientApp'

          - task: Npm@1
            displayName: 'Tests (Angular Application)'
            condition: succeededOrFailed()
            inputs:
              command: custom
              customCommand: run test -- --watch=false --code-coverage --browsers=ChromeHeadless
              workingDir: 'OpenEvent.Web/ClientApp'

          - task: PublishTestResults@2
            displayName: 'Publish Angular test results'
            condition: succeededOrFailed()
            inputs:
              searchFolder: '$(Build.SourcesDirectory)/OpenEvent.Web/ClientApp/junit'
              testRunTitle: Angular
              testResultsFormat: JUnit
              testResultsFiles: "**/TESTS*.xml"

          - task: reportgenerator@4
            displayName: 'Combine code coverage reports'
            condition: succeededOrFailed()
            inputs:
              reports: '$(Build.SourcesDirectory)/OpenEvent.Web/ClientApp/coverage/**/cobertura-coverage.xml;$(Agent.TempDirectory)/**/coverage.cobertura.xml'
              targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
              reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'


          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage report'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml
              reportDirectory: $(Build.SourcesDirectory)/CodeCoverage
          
          - task: DotNetCoreCLI@2
            displayName: "Publish OpenEvent"
            condition: succeeded()
            inputs:
              command: publish
              publishWebProjects: True
              projects: 'OpenEvent.Web/OpenEvent.Web.csproj'
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/dotnet'
              zipAfterPublish: True

  # - stage: Deploy
  #   displayName: "Deploy"
  #   dependsOn: Build
  #   jobs:
  #     - job: "Deploy"
  #       steps:
  #         - task: AzureAppServiceManage@0
  #           inputs:
  #             azureSubscription: 'Pay-As-You-Go(9089fb88-0825-4040-b4e2-8281ff2d7726)'
  #             Action: 'Stop Azure App Service'
  #             WebAppName: 'OpenEvent'
  #         - task: AzureRmWebAppDeployment@4
  #           inputs:
  #             ConnectionType: 'AzureRM'
  #             azureSubscription: 'Pay-As-You-Go(9089fb88-0825-4040-b4e2-8281ff2d7726)'
  #             appType: 'webAppLinux'
  #             WebAppName: 'OpenEvent'
  #             packageForLinux: '$(Build.ArtifactStagingDirectory)/dotnet/**/*.zip'
